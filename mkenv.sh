#!/usr/bin/env bash

set -e

# Sanity check.
#
if [[ -n "$PREFIX" ]] && [[ -n "$(which proot-distro)" ]]; then
	if [[ ! -f proot/envctl.sh ]] || [[ ! -f proot/plugin.sh ]]; then
		echo "This script must be run from the root of the disposable-kali repo!"
		exit 1
	fi
	if [[ ":$PATH:" != *":$HOME/bin:"* ]]; then
		echo "$HOME/bin must bin in your PATH!"
		exit 1
	fi
	CODE_PATH="proot"
else
	echo "No usable install of PRoot Distro found!"
	exit 1
fi

# An engagement name must be supplied.
#
if [[ -n "$1" ]]; then
	NAME="$(echo -n "$1" | tr -c -s '[:alnum:]_-' '-' | tr '[:upper:]' '[:lower:]' | sed 's/^[_-]\+//;s/[_-]\+$//')"
else
	echo "You must supply an engagement name as this script's first (and only) parameter!"
	exit 1
fi

# Determine build variables.
#
SCRIPT="$HOME/bin/${NAME}"
ENGAGEMENT_DIR="$HOME/storage/shared/Documents/Engagements/$NAME"

# Create necessary directories.
#
mkdir -p "$ENGAGEMENT_DIR"
mkdir -p "$(dirname "$SCRIPT")"

# PRoot Distro engages in some serious nannying around pentesting
# distros. While I understand the Termux project's desire not to
# support script-kiddies, and support their refusal to include
# hacking tools (even if it makes my life harder), actively
# subverting user requests is, in my opinion, a step too far.
#
#     https://github.com/termux/proot-distro/commit/470525c55020d72b66b509066b8d71d59b62072c
#
# Proactively un-nerf pentest capabilities (even though we probably
# won't need that functionality ourselves in most cases).
#
sed -i 's/if .*(kali|parrot|nethunter|blackarch).*; then/if false; then/' $(which proot-distro)

TARBALL_SHA256="$(curl https://kali.download/nethunter-images/current/rootfs/kali-nethunter-rootfs-minimal-arm64.tar.xz | sha256sum | sed 's/ .*//')"
BUILD_DATE="$(date)"

sed "s|{{distro-name}}|$NAME|;s|{{build-date}}|$BUILD_DATE|;s|{{tarball-sha256}}|$TARBALL_SHA256|" proot/plugin.sh > "$PREFIX/etc/proot-distro/${NAME}.override.sh"

proot-distro install "$NAME"
proot-distro clear-cache

# For some reason, setting up PostgreSQL/Metasploit works when
# called from proot-distro, but does not work when called using the
# run_proot_cmd helper function when building a new environment.
# For anyone interested in trying to track this down, the error
# message generated by pg_createcluster is:
#
#     FATAL:   Could not create shared memory segment: Function not implemented
#     DETAIL:  Failed system call was shmget
#
proot-distro login "$NAME" --no-arch-warning -- bash -c "su postgres --command=\"pg_createcluster 17 main\" && su postgres --command=\"/etc/init.d/postgresql start\" && msfdb init && su postgres --command=\"/etc/init.d/postgresql stop\""

# Set user password.
#
proot-distro login "$NAME" --no-arch-warning -- bash -c "echo \"kali:\$(uuidgen --random)\" | chpasswd"

# Create dedicated desktop launchers.
#
mkdir --parents "$HOME/.local/share/applications"
#cat "$PREFIX/var/lib/proot-distro/installed-rootfs/$NAME/usr/share/applications/code-oss.desktop" | sed "s#^Name=#Name=[$NAME] #;s#^Exec=#Exec=$SCRIPT #;s#^Categories=.*#Categories=Security#" > "$HOME/.local/share/applications/${NAME}-code-oss.desktop"
cat > "$HOME/.local/share/applications/${NAME}-code-oss.desktop" << EOF
[Desktop Entry]
Name=[$NAME] Code - OSS
Comment=Code Editing. Redefined.
GenericName=Text Editor
Exec=$SCRIPT /usr/bin/code-oss --unity-launch %F
Icon=code-oss
Type=Application
StartupNotify=false
StartupWMClass=Code - OSS
Categories=Security
MimeType=application/x-code-oss-workspace;
Actions=new-empty-window;
Keywords=vscode;

[Desktop Action new-empty-window]
Name=[$NAME] New Empty Window
Exec=$SCRIPT /usr/bin/code-oss --new-window %F
Icon=code-oss
EOF
cat "$PREFIX/var/lib/proot-distro/installed-rootfs/$NAME/usr/share/applications/firefox-esr.desktop" | sed "s#^Name=#Name=[$NAME] #;s#^Exec=#Exec=$SCRIPT #;s#^Categories=.*#Categories=Security#" > "$HOME/.local/share/applications/${NAME}-firefox-esr.desktop"
cat "$PREFIX/var/lib/proot-distro/installed-rootfs/$NAME/usr/share/applications/kali-burpsuite.desktop" | sed "s#^Name=#Name=[$NAME] #;s#^Exec=#Exec=$SCRIPT #;s#^Categories=.*#Categories=Security#" > "$HOME/.local/share/applications/${NAME}-burp-suite.desktop"

# Setup control script.
#
sed "s/{{environment-name}}/$NAME/" proot/envctl.sh > "$SCRIPT"

# Finish up.
#
chmod +x "$SCRIPT"
echo ""
echo "Build finished. The engagement container can be controlled with"
echo "$SCRIPT."
echo ""
echo "------------------------------------------------------------------------"
echo ""
"$SCRIPT" --help
echo ""
